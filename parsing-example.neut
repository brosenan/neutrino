class P : parser(T) where {
    parse(&P, &string, int64) -> list((int64, T))
}.

struct empty = empty.
instance empty : parser(void) where {
    parse(&empty, _, N) := [(N, void)]
}.

instance string : parser(void) where {
    parse(Token, Str, N) := let << {
        TokenLen := strlen(Token);
        Candidate := substr(Str, N, TokenLen)
        if(&Candidate == Token,
            [(N + TokenLen, X)],
            []) del Candidate
    }
}.

struct charSet(F) = charSet(F).
F : int64 @> bool =>
instance charSet(F) : parser(int64) where {
    parse(&charSet(Fn), Str, N) := let << {
        Char := charAt(Str, N);
        if(Fn@Char, [(N+1, Char)], [])
    }
}.

declare concat(list(T), list(T)) -> list(T).
concat(L1, L2) := case L1 of {
    [] => L2;
    [Head | Tail] => [Head | concat(Tail, L2)]
}.

declare flatten(list(list(T)), list(T)) -> list(T).
flatten(LL, L) := case LL of {
    [] => L;
    [Head | Tail] => flatten(Tail, concat(L, Head))
}.

P1 : parser(T1), P2 : parser(T2) =>
instance (Pattern1, Pattern2) : parser((T1, T2)) where {
    parse(&(Pattern1, Pattern2), Str, N) := 
        Pattern1 >> parse(Str, N) 
                 >> map((N1, X) @> Pattern2 >> parse(Str, N1)
                                            >> map((N2, Y) @> (N2, (X, Y))))
                 >> flatten
    }
}.

P1 : parser(T), P2 : parser(T) =>
instance (P1; P2) : parser(T) where {
    parse(&(Pattern1; Pattern2), Str, N) := let << {
        concat(parse(Pattern1, Str, N), parse(Pattern2, Str, N))
    }
}.

struct capture(P, F) = capture(P, F).
P : parser(T1), F : T1 @> T2 =>
instance capture(T1, F) : parser(T2) where {
    parse(&capture(Pattern, Fn), Str, N) :=
        Pattern >> parse(Str, N)
                >> map((N1, X) @> (N1, Fn@X))
}.

struct repeat(P) = repeat(P).
P : parser(T) =>
instance repeat(P) : parser(list(T)) where {
    parse(&repeat(Pattern), Str, N) := let << {
        Rep := repeat(copy(Pattern));
        [(N, []) | Pattern >> parse(Str, N) 
                           >> map((N1, X) @> &Rep >> parse(Str, N1)
                                                  >> map((N2, Y) @> (N2, [X | Y])))]
        del Rep
    }
}.

struct recurse(F) = recurse(F).
F : void @> P, P : parser(T) =>
instance recurse(F) : parser(T) where {
    parse(&recurse(Fn), Str, N) := let << {
        Pattern := Fn@void;
        parse(&Pattern, Str, N) del Pattern
    }
}

digit := capture(charSet(C @> C >= 48 /\ C <= 57), (C @> (C - 48, 10))).
decimal := capture(repeat(digit), Digits @> decimalValue(Digits, 0)).
decimalValue(Digits, Val) := case Digits of {
    [] => Val;
    [Head | Tail] => decimalValue(Tail, Val * 10 + Head)
}.

% addExpr := mulExpr, repeat()